import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;

import java.util.Arrays;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.TreeSet;

import java.util.stream.Collectors;

/**
 * Provides an implementation of the WordLadderGame interface. 
 *
 * @author Kate Moreland (kem0149@auburn.edu)
 */
public class Doublets implements WordLadderGame {

   // The word list used to validate words.
   // Must be instantiated and populated in the constructor.
   /////////////////////////////////////////////////////////////////////////////
   // DECLARE A FIELD NAMED lexicon HERE. THIS FIELD IS USED TO STORE ALL THE //
   // WORDS IN THE WORD LIST. YOU CAN CREATE YOUR OWN COLLECTION FOR THIS     //
   // PURPOSE OF YOU CAN USE ONE OF THE JCF COLLECTIONS. SUGGESTED CHOICES    //
   // ARE TreeSet (a red-black tree) OR HashSet (a closed addressed hash      //
   // table with chaining).
   /////////////////////////////////////////////////////////////////////////////

   HashSet <String>lexicon;
   
   /**
    * Instantiates a new instance of Doublets with the lexicon populated with
    * the strings in the provided InputStream. The InputStream can be formatted
    * in different ways as long as the first string on each line is a word to be
    * stored in the lexicon.
    */
   public Doublets(InputStream in) {
      try {
         //////////////////////////////////////
         // INSTANTIATE lexicon OBJECT HERE  //
         //////////////////////////////////////
         lexicon = new HashSet <String>();
         Scanner s =
            new Scanner(new BufferedReader(new InputStreamReader(in)));
         while (s.hasNext()) {
            String str = s.next();
            /////////////////////////////////////////////////////////////
            // INSERT CODE HERE TO APPROPRIATELY STORE str IN lexicon. //
            /////////////////////////////////////////////////////////////
            lexicon.add(str.toLowerCase());
            s.nextLine();
         }
         in.close();
      }
      catch (java.io.IOException e) {
         System.err.println("Error reading from InputStream.");
         System.exit(1);
      }
   }


   //////////////////////////////////////////////////////////////
   // ADD IMPLEMENTATIONS FOR ALL WordLadderGame METHODS HERE  //
   //////////////////////////////////////////////////////////////

   public int getHammingDistance(String str1, String str2) {
      if (str1.length() != str2.length()) {
         return -1;
      }
      int difference = 0;
      for (int i = 0; i < str1.length(); i++) {
         if (str1.charAt(i) != str2.charAt(i)) {
            difference++;
         }
      }
      return difference;
   }

   public List<String> getMinLadder(String start, String end) {
      List<String> list = new ArrayList<String> ();
      List<String> EmptyList = new ArrayList<String> ();
      if (start.length() != end.length() || !isWord(start) || !isWord(end)) {
         return list;
      }
      if (start == end) {
         list.add(start);
         return list;
      }
      else if (getHammingDistance(start, end) == 1) {
         list.add (start);
         list.add (end);
         return list;
      }
      Deque<Node> q = new ArrayDeque<>();
      TreeSet<String> one = new TreeSet<>();
      one.add(start);
      q.addLast(new Node(start, null));
      while (!q.isEmpty()) {
         Node n = q.removeFirst();
         String element = n.element;
         for (String neighbor : getNeighbors(element)) {
            if (!one.contains(neighbor)) {
               one.add(neighbor);
               q.addLast(new Node(neighbor, n));
            }
            if (neighbor.equals(end)) {
               Node m = q.removeLast();
               while (m != null) {
                  list.add(0, m.element);
                  m = m.predecessor;
               }
               return list;
            }
         }
      }
      return EmptyList;
   }
   
   public List<String> getNeighbors(String word) {
      ArrayList <String>list = new ArrayList<String>();
      char[] wordarray = word.toCharArray();
      for (int i = 0; i < word.length(); i++) {
         char origin = word.charAt(i);
         for (char alphabet = 'a'; alphabet <= 'z'; alphabet++) {
            if (origin != alphabet) {
               wordarray[i] = alphabet;
               String result = String.valueOf(wordarray);
               if (isWord(result)) {
                  list.add(result);
               }
            }
         }
         wordarray[i] = origin;
      }
      return list;
   }
   
   public int getWordCount() {
      return lexicon.size();
   }
   
   public boolean isWord(String str) {
      if (lexicon.contains(str)) {
         return true;
      }
      else {
         return false;
      }
   }
   
   public boolean isWordLadder(List<String> sequence) {
      if ((sequence == null) || sequence.isEmpty()) {
         return false;
      }
      if (!isWord(sequence.get(0))) {
         return false;
      }
      for (int i = 0; i < sequence.size() - 1; i++) {
         if (!isWord(sequence.get(i)) || isWord(sequence.get(i + 1)) != true|| (getHammingDistance(sequence.get(i), sequence.get(i + 1)) != 1))
            return false;
      }
      return true;
   }
   private class Node {
      String element;
      Node predecessor;
         
      public Node(String p, Node pred) {
         element = p;
         predecessor = pred;
      }
   }
}

