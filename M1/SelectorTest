import java.util.Arrays;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import org.junit.Test;


public class SelectorTest {

   int[] a = {2, 8, 7, 3, 4};
   int[] b = {5, 9, 1, 7, 3};
   int[] c = {8, 7, 6, 5, 4};
   int[] d = {8, 2, 8, 7, 3, 3, 4};

   //Tests method min 
   @Test public void min() {
      assertEquals(2, Selector.min(a));
      assertEquals(1, Selector.min(b));
      assertEquals(4, Selector.min(c));
      assertEquals(2, Selector.min(d));
   }
   
   //Tests method max
   @Test public void max() {
      assertEquals(8, Selector.max(a));
      assertEquals(9, Selector.max(b));
      assertEquals(8, Selector.max(c));
      assertEquals(8, Selector.max(d));
   }
   
   //Test method range
   @Test public void range1() {
      int[] expected = {2,3,4};
      Arrays.sort(expected);
      int[] actual = Selector.range(a,1,5);
      Arrays.sort(actual);
      assertArrayEquals(expected, actual);
   }
   
   @Test public void range2() {
      int[] expected = {5,3};
      Arrays.sort(expected);
      int[] actual = Selector.range(b,3,5);
      Arrays.sort(actual);
      assertArrayEquals(expected, actual);
   }
   
   @Test public void range3() {
      int[] expected = {8,7,6,5,4};
      Arrays.sort(expected);
      int[] actual = Selector.range(c,4,8);
      Arrays.sort(actual);
      assertArrayEquals(expected, actual);
   }
   
   @Test public void range4() {
      int[] expected = {7,3,3,4};
      Arrays.sort(expected);
      int[] actual = Selector.range(d,3,7);
      Arrays.sort(actual);
      assertArrayEquals(expected,actual);
   }
   
   //Test method ceiling
   @Test public void ceiling1() {
      assertEquals(2, Selector.ceiling(a,1));
   }
   
   @Test public void ceiling2() {
      assertEquals(7, Selector.ceiling(b,7));
   }
   
   @Test public void ceiling3() {
      assertEquals(4, Selector.ceiling(c,0));
   }
   
   @Test public void ceiling4() {
      assertEquals(7, Selector.ceiling(d,5));
   }
   
   //Test method floor
   @Test public void floor1() {
      assertEquals(4, Selector.floor(a,6));
   }
   
   @Test public void floor2() {
      assertEquals(1, Selector.floor(b,1));
   }
    
   @Test public void floor3() {
      assertEquals(8, Selector.floor(c,9));
   }
    
   @Test public void floor4() {
      assertEquals(4, Selector.floor(d,5));
   }
   
   //Test method kmin 
   @Test public void kmi1n() {
      assertEquals(2, Selector.kmin(a,1));
   }
   
   @Test public void kmin2() {
      assertEquals(5, Selector.kmin(b,3));
   }
   
   @Test public void kmin3() {
      assertEquals(8, Selector.kmin(c,5));
   }
   
   @Test public void kmin4() {
      assertEquals(4, Selector.kmin(d,3));
   }
   
   //Test method kmax
   @Test public void kmax1() {
      assertEquals(8, Selector.kmax(a,1));
   }
   
   @Test public void kmax2() {
      assertEquals(5, Selector.kmax(b,3));
   }
   
   @Test public void kmax3() {
      assertEquals(4, Selector.kmax(c,5));
   }
   
   @Test public void kmax4() {
      assertEquals(4, Selector.kmax(d,3));
   }
}
